package juegoVida;

import juegoVida.Casilla;
import juegoVida.Superficie;

public class CelulaSimple extends Celula {
	
	private static final int PASOS_REPRODUCCION = 2;
    private static final int MAX_PASOS_SIN_MOVER = 1;
    private int noMovimiento;
    private int pasos;
    
	public CelulaSimple(){
		super();
		esComestible = true;
		this.pasos = 0;
		this.noMovimiento = 0;
	}	
	
	/**
     * Calcula la casilla de destino.
     * @param fil Coordenada x de donde se encuentra la celula
     * @param col Coordenada y de donde se encuentra la celula
     * @param superficie
     * @return Devuelve una casilla de destino a la celula
     */
	@Override
	public Casilla ejecutaMovimiento(int f, int c, Superficie superficie) {
        int contador = 0;
        int[] incremFila = {-1, -1, -1, 0, 1, 1, 1, 0};         // creamos los arrays incrementafil y col que contendran los numeros a a√±adir a la posicion actual de la celula
        int[] incremColumna = {-1, 0, 1, 1, 0, 1, 0, -1, -1};   //para poder acceder a las posiciones de alrededor
        Casilla[] posicionesLibres = new Casilla[8];  //Creacion de un array de casillas de tama√±o 8, las posiciones posibles que puede rodear a una celula
        
        for (int w = 0; w < 8; w++) {                   //bucle que se ejecuta las 8 veces, para ir comprobando las posiciones de alrededor

            int nf = f + incremFila[w];
            int nc = c + incremColumna[w];
            
            //comprobamos que que las posiciones de alrededor no esten fuera del rango de la matriz, que esten vacias y no haya habido una celula en esa posicion antes
            if ((superficie.correctos(nf, nc)) && (superficie.esVacia(nf, nc))){    
                posicionesLibres[contador]  = new Casilla(nf, nc);  // en caso de cumplirse esas tres condiciones procedemos a ir rellenando nuestro array
                contador++;
            }
        }
        
        if (contador == 0) {  //en caso de que nuestro array de casillas este vacia devolvemos null
            
        	return null;
        } else {        // en caso contrario elegimos aleatoriamente una casilla a devolver
            int elegido = (int) (Math.random() * contador);
            return posicionesLibres[elegido];
        }
	}
	
	
    /**
     * Incrementa en una unidad los pasos sin mover de la cÈlula
     * @return si la cÈlula se ha excedido en turnos sin moverse
     */
    public boolean incrementaCompruebaNoMovimiento(){
        boolean haMuerto = false;
        incrementaNoMovimiento();
        if (getNoMovimiento() > MAX_PASOS_SIN_MOVER) {
        	haMuerto = true;
        }
        return haMuerto;
    }
    
    /**
     * Incrementa en una unidad los pasos movidos de la cÈlula
     * @return si la cÈlula se ha excedido en turnos para poder reproducirse
     */
    public boolean incrementaCompruebaPasosReproduccion(){
        boolean reproduce = false;
        incrementaPasos();
        if (getPasos() > PASOS_REPRODUCCION) {
        	reproduce = true;
        }
        return reproduce;
    }

    
    /**
     * Incrementa en una unidad los pasos de reproducci√≥n de la c√©lula
     */
    public void incrementaPasos() {
        this.pasos++;
    }
    
    public void incrementaNoMovimiento(){
    	this.noMovimiento++;
    }
    
    /**
     * Devuelve los pasos sin moverse de una c√©lula
     * @return Pasos sin moverse
     */
    public int getNoMovimiento() {
        return this.noMovimiento;
    }
    
    /**
     * Devuelve los pasos dados por una c√©lula para reproducirse
     * @return Pasos dados para reproducci√≥n
     */
    public int getPasos() {
        return this.pasos;
    }
    
	 /**
	  * Devuelve el valor de esComestible
	  */
	@Override
	public boolean esComestible() {
		return esComestible;
	}
    
    /**
     * Devuelve el String de cada C√©lula
     */
    @Override
    public String toString() {
        return getPasos()+"-"+getNoMovimiento();
    }
}
