package juegoVida;

import Celulas.CelulaCompleja;
import Celulas.CelulaSimple;
import comandos.ParserComandos;

public class Mundo {

	private static final int N_COLUMNAS = 3;
    private static final int N_FILAS = 3;
	private static final int N_CEL_SIMPLES = 3; //n√∫mero de c√©lulas iniciales
	private static final int N_CEL_COMPLEJAS = 2; //n√∫mero de c√©lulas iniciales

	private boolean simulacionTerminada;
	private String ayuda;
	private Superficie superficie;
	
	/**
     * CONSTRUCTORA
     */
	public Mundo() {
		simulacionTerminada = false;
		ayuda = ParserComandos.ayudaComandos();
		superficie = new Superficie(N_FILAS, N_COLUMNAS);

        inicia();
	}	
	
	/**
     * MÈtodo que ejecuta el comando INICIAR,
     * creando una nueva supericie vacia, y creando X celulasSimples y X celulasComplejas en posiciones aleatorias
     */
	public void inicia() {
		nuevaSuperficie();		//crea nueva superficie vacia
        int fil;
        int col;
        int celulasColocadas = 0;
        while (celulasColocadas < N_CEL_SIMPLES) { //coloca celulas simples enposiciones aleatorias
            fil = (int) (Math.random() * N_FILAS);
            col = (int) (Math.random() * N_COLUMNAS);

            if (this.superficie.esVacia(fil, col)) {
                this.superficie.nuevaCelula(fil, col, new CelulaSimple());
                celulasColocadas++;
            }
        }
        celulasColocadas = 0;
        while (celulasColocadas < N_CEL_COMPLEJAS) { //coloca celulas complejas enposiciones aleatorias
            fil = (int) (Math.random() * N_FILAS);
            col = (int) (Math.random() * N_COLUMNAS);
            if (this.superficie.esVacia(fil, col)) {
                this.superficie.nuevaCelula(fil, col, new CelulaCompleja());
                celulasColocadas++;
            }
        }
	}
	
	/**
     * MÈtodo que se encarga del movimiento/evolucion de las celulas de la superficie
     */

	public void evoluciona() {
		boolean muerePasos = false;                     
        boolean muereRep = false;
      //creamos una matriz boleana que recorre la superficie, para evitar mover una celula dos veces
		boolean haMovido[][] = new boolean [N_FILAS][N_COLUMNAS];
		//inicializamos la matriz
    	for (int i = 0; i < N_FILAS; i++) {
            for (int j = 0; j < N_COLUMNAS; j++) {
                haMovido[i][j] = false;
            }
        }
    	for (int i = 0; i < N_FILAS; i++) {
            for (int j = 0; j < N_COLUMNAS; j++) {
                if (!haMovido[i][j] && !superficie.esVacia(i, j)) { //si no hemos movido dicha celula todavia, y mientras la superficie no estÈ vacia
                	Casilla destino = superficie.ejecutaMovimiento(i, j); //recibimos la posicion a la que dicha celula debe moverse x,y o null en caso contrario
                	if (destino != null) {
                		
                		if(!superficie.esComestible(i, j)){ //compruebo si es una celula compleja
                			//incremento numero de celulas comidas(en supuesto caso), si supera el maximo, explota y muere
                			if(superficie.compruebaMaxComidas(i, j)){
                				superficie.killCell(i, j);	//Muere la celula por llevar X celulas comidas
                				superficie.killCell(destino.getFila(), destino.getColumna()); //Muere la celulaSimple donde la celulaCompleja se ha llenado
                				GuiaEjecucion.arrayEvoluciona.add("Celula Comleja en (" + i + "," + j + ") se mueve a (" + destino.getFila() + "," + destino.getColumna() + ") -- COME--");
                				GuiaEjecucion.arrayEvoluciona.add("Explota la Celula Comleja en (" + destino.getFila() + "," + destino.getColumna() + ")");                				
                			}
                			else{ //En caso de no explotar, se ocupa la celda a la que se va a mover                				
                				if(superficie.esVacia(destino.getFila(), destino.getColumna())){   //Si la celulaCompleja ocupa una casilla vacia... NO COME              		
                					GuiaEjecucion.arrayEvoluciona.add("Celula Compleja en (" + i + "," + j + ") se mueve a (" + destino.getFila() + "," + destino.getColumna() + ") -- NO COME--");
                				}
                				else{ //Si la celulaCompleja ocupa una casilla donde se encuentra una celulaSimple...  COME
                					GuiaEjecucion.arrayEvoluciona.add("Celula Compleja en (" + i + "," + j + ") se mueve a (" + destino.getFila() + "," + destino.getColumna() + ") -- COME--");
                				}
                				haMovido[destino.getFila()][destino.getColumna()] = true;
                				superficie.seMueve(i, j, destino.getFila(), destino.getColumna()); //se mueve de i,j hasta la posicion de destino
                			}
                			
                		}
                		else{ //En caso de tratarse de una celula simple  
                			//incrementa el numero de pasosReproducion, y comprueba si ha alcanzado el maximo par apoder reproducirse
                			if(superficie.incrementaCompruebaPasosReproduccion(i, j)){
                				superficie.seReproduce(i, j, destino.getFila(), destino.getColumna()); //en ese caso, se reproduce
                				haMovido[i][j] = true;
                				haMovido[destino.getFila()][destino.getColumna()] = true;
                				GuiaEjecucion.arrayEvoluciona.add("Nace nueva Celula en (" + destino.getFila() + "," + destino.getColumna() + ") cuyo padre ha sido (" + i + "," + j + ")");
                			}
                			else{
                				superficie.seMueve(i, j, destino.getFila(), destino.getColumna()); //En dicho caso solo se desplaza
                				haMovido[destino.getFila()][destino.getColumna()] = true;
                				GuiaEjecucion.arrayEvoluciona.add("Movimiento de  (" + i + "," + j + ") a (" + destino.getFila() + "," + destino.getColumna() + ")");                				
                			}
                			
                		}	
            		}else
            			if(superficie.esComestible(i, j)){ //compruebo que sea una celulaSimple
                			//incremento noMovimineto++, y a su vez compruebo que se no se haya excedido de MAX_PASOS_SIN_MOVER
                			if(superficie.incrementaCompruebaNoMovimiento(i, j)){ //La celulaSimple puede morirse por haber superado el max_pasos_reproduccion
                				 muerePasos = true;
                				 GuiaEjecucion.arrayEvoluciona.add("Muere la Celula en (" + i + "," + j + ") por no poder moverse ");
                			}
                			if(superficie.incrementaCompruebaPasosReproduccion(i, j)){//La celulaSimple puede morirse por haber superado el max_noMovimiento
                				muereRep = true;
                				 GuiaEjecucion.arrayEvoluciona.add("Muere la Celula en (" + i + "," + j + ") por no poder reproducirse ");
                			}
                			if(muerePasos || muereRep){
                				superficie.killCell(i, j);	//En caso de excederse, se muere la celula
                			}
                			else{     
                				haMovido[i][j] = true; //en caso de no morir, la celda queda ocupada
                				GuiaEjecucion.arrayEvoluciona.add("No se mueve la Celula (" + i + "," + j + ") por estar rodeada");
                			}
                			
                		}
            			else{ //en caso de que sea una celCompleja
            				haMovido[i][j] = true; //se mantiene debido a que no puede comerse otra compleja
            				GuiaEjecucion.arrayEvoluciona.add("Celula Compleja en (" + i + "," + j + ") no se mueve ya que en la posicion elegida se encuentra una celula compleja");
            			}                		
                   }
            }
        }
    }
	
	/**
     * Elimina una cÈlula, tanto si es compleja o simple, en la posicion x,y
     * @param x Coordenada x de la cÈlula
     * @param y Coordenada y de la cÈlula
     */
	public void eliminarCelula(int x, int y){
		if (x < N_FILAS && y < N_COLUMNAS) {
		    if (!superficie.esVacia(x, y)) { //eliminacion de una celula en la posicion x,y en caso de haber introducido una coordena correcta dentro del tablero
		    	superficie.killCell(x, y);
		    	System.out.println("Eliminada");
		    } else {						//casuÌstica de que hayamos escogido unas coordenadas dentro del tablero erroreas
            	GuiaEjecucion.arrayMensajes.add("La casilla esta vacia");
		    }
		}
		else {//casuÌstica de que hayamos escogido unas coordenadas FUERA del tablero
			GuiaEjecucion.arrayMensajes.add("Las coordenadas introducidas se salen del tablero.");
		}
	}
	
	/**
     * CreaciÛn una cÈlula simple, en la posicion x,y
     * @param x Coordenada x de la cÈlula
     * @param y Coordenada y de la cÈlula
     */
	public void crearCelulaSimple(int x, int y) {
        if (x < N_FILAS && y < N_COLUMNAS) {
            if (superficie.esVacia(x, y)) { //CREACION de una celula SIMPLE en la posicion x,y en caso de haber introducido una coordena correcta dentro del tablero
            	this.superficie.nuevaCelula(x, y, new CelulaSimple());
            } else {	//casuÌstica de que hayamos escogido unas coordenadas dentro del tablero erroreas
            	GuiaEjecucion.arrayMensajes.add("La casilla estaba ocupada ya"); //en caso contrario mandamos mensaje de error
            }
        }
        else {	//casuÌstica de que hayamos escogido unas coordenadas FUERA del tablero
        	GuiaEjecucion.arrayMensajes.add("Las coordenadas introducidas se salen del tablero.");
        }
	}
	
	/**
     * CreaciÛn una cÈlula simple, en la posicion x,y
     * @param x Coordenada x de la cÈlula
     * @param y Coordenada y de la cÈlula
     */
	public void crearCelulaCompleja(int x, int y) {
        if (x < N_FILAS && y < N_COLUMNAS) {
            if (superficie.esVacia(x, y)) { //CREACION de una celula COMPLEJA en la posicion x,y en caso de haber introducido una coordena correcta dentro del tablero
            	this.superficie.nuevaCelula(x, y, new CelulaCompleja());
            } else {	//casuÌstica de que hayamos escogido unas coordenadas dentro del tablero erroreas
            	GuiaEjecucion.arrayMensajes.add("La casilla estaba ocupada ya");
            }
        }
        else {	//casuÌstica de que hayamos escogido unas coordenadas FUERA del tablero
        	GuiaEjecucion.arrayMensajes.add("Las coordenadas introducidas se salen del tablero.");
        }
	}
	
	/**
	 * CreaciÛn d euna nueva superficie
     */
	public void nuevaSuperficie() {
		superficie = new Superficie(N_FILAS, N_COLUMNAS);
	}
	
	/**
     * Devuelve el valor de simulacionTerminada
     */
	public boolean esSimulacionTerminada(){
		return simulacionTerminada;
	}
	
	/**
     * Asigna el valor de simulacionTerminada
     */
	public void terminarSimulacion() {
		simulacionTerminada = true;
	}
	
	/**
     * Muestra la ayuda
     */
	public void muestraAyuda() {
		System.out.println(ayuda);
	}	
	
	/**
     * Devuelve el String ya creado en Superficie
     */
    @Override    
    public String toString(){
        return this.superficie.toString();
    }
}