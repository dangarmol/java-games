package mundos;


import java.io.FileWriter;
import java.io.IOException;
import java.util.NoSuchElementException;
import java.util.Scanner;

import celulas.CelulaSimple;
import juegoVida.Casilla;
import excepciones.CelulaIncorrecta;
import excepciones.ErrorLecturaFichero;
import excepciones.FormatoNumericoIncorrecto;
import excepciones.IndicesFueraDeRango;
import excepciones.PosicionOcupada;

public class MundoSimple extends Mundo {
	protected int nCelSimples; //nÃºmero de cÃ©lulas iniciales	
	/**
	 * CONSTRUCTORA
	 * @param f dimension fila
	 * @param c	dimension columna
	 * @param s numero de celulas simples
	 */
	public MundoSimple(int f, int c, int s) {
		super(f,c);
		this.nCelSimples = s;
		inicializaMundo();
	}
	
	/**
	 * CONSTRUCTORA
	 * @param f numero de filas
	 * @param c numero de columnas
	 */
	public MundoSimple(int f, int c){
		super(f,c);
	}
	public MundoSimple(){
		super();
	}
	
	/**
     * Método que ejecuta el comando INICIAR,
     * creando una nueva supericie vacia, y creando X celulasSimples y X celulasComplejas en posiciones aleatorias
     */
	public void inicializaMundo() {
		vaciarMundo();		//crea nueva superficie vacia
        int fil;
        int col;
        int celulasColocadas = 0;
        while (celulasColocadas < nCelSimples) { //coloca celulas simples enposiciones aleatorias
            fil = (int) (Math.random() * nFilas);
            col = (int) (Math.random() * nColumnas);

            if (this.superficie.esVacia(fil, col)) {
                this.superficie.nuevaCelula(fil, col, new CelulaSimple());
                celulasColocadas++;
            }
        }
	}	
	
	/**
	 * metodo que se encarga de mover las celulas, y que estas evolucionen
	 */
	
	
	/**
     * Se encarga de buscar casillas de alrededor de una celula a las cuales podría moverse, cumpliendo siempre las reglas de restricción dadas
     * Una vez que ya hemos seleccionado las posibles casillas, elegimos una siempre que sea posible.
     * @param fil Coordenada x de donde se encuentra la celula
     * @param col Coordenada y de donde se encuentra la celula
     * @param puedeMover Matriz de booleanos que dice qué células pueden mover en este turno, se genera antes de iniciar el turno para evitar que muevan varias veces
     * @return Devuelve una casilla de forma aleatoria, o un valor nulo en caso de no haber ninguna
     */
	
	public Casilla buscarMovimiento(int fil, int col, boolean puedeMover[][]) {
        int contador = 0;
        int[] incremFila = {-1, -1, -1, 0, 1, 1, 1, 0};         // creamos los arrays incrementafil y col que contendran los numeros a añadir a la posicion actual de la celula
        int[] incremColumna = {-1, 0, 1, 1, 0, 1, 0, -1, -1};   //para poder acceder a las posiciones de alrededor
        Casilla[] posicionesLibres = new Casilla[8];  //Creacion de un array de casillas de tamaño 8, las posiciones posibles que puede rodear a una celula

        for (int w = 0; w < 8; w++) {                   //bucle que se ejecuta las 8 veces, para ir comprobando las posiciones de alrededor

            int nf = fil + incremFila[w];
            int nc = col + incremColumna[w];
            
            //comprobamos que que las posiciones de alrededor no esten fuera del rango de la matriz, que esten vacias y no haya habido una celula en esa posicion antes
            if ((this.correctos(nf, nc)) && (!puedeMover[nf][nc]) && (superficie.esVacia(nf, nc))){    
                posicionesLibres[contador]  = new Casilla(nf, nc);  // en caso de cumplirse esas tres condiciones procedemos a ir rellenando nuestro array
                contador++;
            }
        }
        
        if (contador == 0) {  //en caso de que nuestro array de casillas este vacia devolvemos null
            return null;
        } else {        // en caso contrario elegimos aleatoriamente una casilla a devolver
            int elegido = (int) (Math.random() * contador);
            return posicionesLibres[elegido];
        }
    }
	
	/**
     * Dados unas posiciones nf y nc de una celula, se encarga de ver si dicha coordenada se encuentra acotada dentro de la superficie
     * @param nf Coordenada x
     * @param nc Coordenada y
     * @return Devuelve un booleano true en caso de que dicha posicion este acotada, false si esta fuera de rango
     */
    public boolean correctos(int nf, int nc) {
        boolean ok = true;
        if (nf < 0 || nf >= nFilas || nc < 0 || nc >= nColumnas) {
            ok = false;
        }
        return ok;
    }
    
    /**
     * Inicia la matriz de booleanos diciendo si una célula puede mover, está vacía, ya ha movido etc...
     * @param puedeMover es la matriz
     */
    public void startMatrix(boolean puedeMover[][]) {
        for (int i = 0; i < nFilas; i++) {
            for (int j = 0; j < nColumnas; j++) {
                puedeMover[i][j] = !this.superficie.esVacia(i, j);
            }
        }
    }
	
	
    /**
	 * guarda el tipo de juego, en este caso escribe en le fichero: simple
	 * @param fw
	 * @throws IOexception
	 */
	public void guardaTipoJuego(FileWriter fw) throws IOException {
		fw.write("simple");
		fw.write(System.getProperty("line.separator"));			
	}
	

	
	/**
     * Creación una célula simple, en la posicion x,y
     * @param x Coordenada x de la célula
     * @param y Coordenada y de la célula
	 * @throws PosicionOcupada 
	 * @throws IndicesFueraDeRango 
	 * @throws CelulaIncorrecta 
     */
	@Override
	public void crearCelula(int x, int y) throws IndicesFueraDeRango, PosicionOcupada{
		if (x < nFilas && y < nColumnas) {
	        if (superficie.esVacia(x, y)) { //CREACION de una celula SIMPLE en la posicion x,y en caso de haber introducido una coordena correcta dentro del tablero
	        	this.superficie.nuevaCelula(x, y, new CelulaSimple());
	        } else {	// casuística de que hayamos escogido unas coordenadas dentro del tablero erroreas
				throw new PosicionOcupada("Se solicitó crear en posición ocupada Fil:" + x + " Col: "+ y);
	        }
	    }
	    else {	//casuï¿½stica de que hayamos escogido unas coordenadas FUERA del tablero
	    	throw new IndicesFueraDeRango("Rango incorrecto Fila: " + x + " Col: "+ y);	    }		
	}
	
	 public String toString(){
	        return this.superficie.toString();
	    }

	 /**
	  * carga el tipo de juego de fichero, primero las posiciones de la celula
	  * y a continuación, dependiendo de que tipo de celula sea u otra, llama a superficie
	  * @param sc
	  * @throws FormatoNumericoIncorrecto
	  */
	@Override
	public void cargarTipoJuego(Scanner sc) throws FormatoNumericoIncorrecto {		
		boolean continuar = true;
		do{
			int x = 0;
			try{
				ErrorLecturaFichero.incrementaContLinea();
				x = sc.nextInt();
			}
			catch (NoSuchElementException e) { // Se alcanzó final del fichero
				continuar = false;
				sc.close();				
			}
			
			if (continuar){
				int y = sc.nextInt();
				String tipoCelula = sc.next();
				if(tipoCelula.equals("simple")){
					CelulaSimple celulaSimple = new CelulaSimple();
					superficie.nuevaCelula(x, y, celulaSimple);
					celulaSimple.cargar(sc);
				}
			}
		}while(continuar);
	}
}
