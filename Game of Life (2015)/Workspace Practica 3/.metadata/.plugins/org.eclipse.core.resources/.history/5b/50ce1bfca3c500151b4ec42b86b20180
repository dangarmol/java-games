package juegoVida;

import java.io.FileWriter;
import java.io.IOException;
import java.util.NoSuchElementException;
import java.util.Scanner;

import juegoVida.Casilla;
import juegoVida.CelulaCompleja;
import juegoVida.CelulaSimple;
import juegoVida.GuiaEjecucion;
import excepciones.CelulaIncorrecta;
import excepciones.ErrorLecturaFichero;
import excepciones.FormatoNumericoIncorrecto;
import excepciones.IndicesFueraDeRango;
import excepciones.PosicionOcupada;

public class MundoComplejo extends Mundo{
	
	protected int nCelSimples; //nÃºmero de cÃ©lulas iniciales
	protected int nCelComplejas; //nÃºmero de cÃ©lulas iniciales
	
	
	/**
	 * CONSTRUCTORA
	 * @param f número de filas
	 * @param c número de columnas
	 * @param cs número de celulasSimples
	 * @param cc número de celulasComplejas
	 */
	public MundoComplejo(int f, int c, int cs, int cc) {
		super(f,c);
		this.nCelSimples = cs;
		this.nCelComplejas = cc;
		inicializaMundo();
	}
	
	/**
	 * CONSTRUCTORA
	 * @param f número de filas
	 * @param c número de columnas
	 */
	public MundoComplejo(int f, int c){
		super(f,c);
	}
	
	public MundoComplejo(){
		super();
	}
	
	/**
     * Método que ejecuta el comando INICIAR,
     * creando una nueva supericie vacia, y creando X celulasSimples y X celulasComplejas en posiciones aleatorias
     */
	public void inicializaMundo() {
		vaciarMundo();		//crea nueva superficie vacia
        int fil;
        int col;
        int celulasColocadas = 0;
        while (celulasColocadas < nCelSimples) { //coloca celulas simples enposiciones aleatorias
            fil = (int) (Math.random() * nFilas);
            col = (int) (Math.random() * nColumnas);

            if (this.superficie.esVacia(fil, col)) {
                this.superficie.nuevaCelula(fil, col, new CelulaSimple());
                celulasColocadas++;
            }
        }
        celulasColocadas = 0;
        while (celulasColocadas < nCelComplejas) { //coloca celulas complejas enposiciones aleatorias
            fil = (int) (Math.random() * nFilas);
            col = (int) (Math.random() * nColumnas);
            if (this.superficie.esVacia(fil, col)) {
                this.superficie.nuevaCelula(fil, col, new CelulaCompleja());
                celulasColocadas++;
            }
        }
	}
	
	/**
	 * Método que se encarga de evolucionar el mundo
	 */
	public void evoluciona() {
		boolean muerePasos = false;                     
        boolean muereRep = false;
      //creamos una matriz boleana que recorre la superficie, para evitar mover una celula dos veces
		boolean haMovido[][] = new boolean [nFilas][nColumnas];
		//inicializamos la matriz
    	for (int i = 0; i < nFilas; i++) {
            for (int j = 0; j < nColumnas; j++) {
                haMovido[i][j] = false;
            }
        }
    	for (int i = 0; i < nFilas; i++) {
            for (int j = 0; j < nColumnas; j++) {
                if (!haMovido[i][j] && !superficie.esVacia(i, j)) { //si no hemos movido dicha celula todavia, y mientras la superficie no estï¿½ vacia
                	Casilla destino = superficie.ejecutaMovimiento(i, j); //recibimos la posicion a la que dicha celula debe moverse x,y o null en caso contrario
                	if (destino != null) {
                		
                		if(!superficie.esComestible(i, j)){ //compruebo si es una celula compleja
                			//incremento numero de celulas comidas(en supuesto caso), si supera el maximo, explota y muere
                			if(superficie.compruebaMaxComidas(i, j)){
                				superficie.killCell(i, j);	//Muere la celula por llevar X celulas comidas
                				superficie.killCell(destino.getFila(), destino.getColumna()); //Muere la celulaSimple donde la celulaCompleja se ha llenado
                				GuiaEjecucion.arrayEvoluciona.add("Celula Comleja en (" + i + "," + j + ") se mueve a (" + destino.getFila() + "," + destino.getColumna() + ") -- COME--");
                				GuiaEjecucion.arrayEvoluciona.add("Explota la Celula Compleja en (" + destino.getFila() + "," + destino.getColumna() + ")");                				
                			}
                			else{ //En caso de no explotar, se ocupa la celda a la que se va a mover                				
                				if(superficie.esVacia(destino.getFila(), destino.getColumna())){   //Si la celulaCompleja ocupa una casilla vacia... NO COME              		
                					GuiaEjecucion.arrayEvoluciona.add("Celula Compleja en (" + i + "," + j + ") se mueve a (" + destino.getFila() + "," + destino.getColumna() + ") -- NO COME--");
                				}
                				else{ //Si la celulaCompleja ocupa una casilla donde se encuentra una celulaSimple...  COME
                					GuiaEjecucion.arrayEvoluciona.add("Celula Compleja en (" + i + "," + j + ") se mueve a (" + destino.getFila() + "," + destino.getColumna() + ") -- COME--");
                				}
                				haMovido[destino.getFila()][destino.getColumna()] = true;
                				superficie.seMueve(i, j, destino.getFila(), destino.getColumna()); //se mueve de i,j hasta la posicion de destino
                			}
                			
                		}
                		else{ //En caso de tratarse de una celula simple  
                			//incrementa el numero de pasosReproducion, y comprueba si ha alcanzado el maximo par apoder reproducirse
                			if(superficie.incrementaCompruebaPasosReproduccion(i, j)){
                				superficie.seReproduce(i, j, destino.getFila(), destino.getColumna()); //en ese caso, se reproduce
                				haMovido[i][j] = true;
                				haMovido[destino.getFila()][destino.getColumna()] = true;
                				GuiaEjecucion.arrayEvoluciona.add("Nace nueva Celula en (" + destino.getFila() + "," + destino.getColumna() + ") cuyo padre ha sido (" + i + "," + j + ")");
                			}
                			else{
                				superficie.seMueve(i, j, destino.getFila(), destino.getColumna()); //En dicho caso solo se desplaza
                				haMovido[destino.getFila()][destino.getColumna()] = true;
                				GuiaEjecucion.arrayEvoluciona.add("Movimiento de  (" + i + "," + j + ") a (" + destino.getFila() + "," + destino.getColumna() + ")");                				
                			}
                			
                		}	
            		}else
            			if(superficie.esComestible(i, j)){ //compruebo que sea una celulaSimple
                			//incremento noMovimineto++, y a su vez compruebo que se no se haya excedido de MAX_PASOS_SIN_MOVER
                			if(superficie.incrementaCompruebaNoMovimiento(i, j)){ //La celulaSimple puede morirse por haber superado el max_pasos_reproduccion
                				 muerePasos = true;
                				 GuiaEjecucion.arrayEvoluciona.add("Muere la Celula en (" + i + "," + j + ") por no poder moverse ");
                			}
                			if(superficie.incrementaCompruebaPasosReproduccion(i, j)){//La celulaSimple puede morirse por haber superado el max_noMovimiento
                				muereRep = true;
                				 GuiaEjecucion.arrayEvoluciona.add("Muere la Celula en (" + i + "," + j + ") por no poder reproducirse ");
                			}
                			if(muerePasos || muereRep){
                				superficie.killCell(i, j);	//En caso de excederse, se muere la celula
                			}
                			else{     
                				haMovido[i][j] = true; //en caso de no morir, la celda queda ocupada
                				GuiaEjecucion.arrayEvoluciona.add("No se mueve la Celula (" + i + "," + j + ") por estar rodeada");
                			}
                			
                		}
            			else{ //en caso de que sea una celCompleja
            				haMovido[i][j] = true; //se mantiene debido a que no puede comerse otra compleja
            				GuiaEjecucion.arrayEvoluciona.add("Celula Compleja en (" + i + "," + j + ") no se mueve ya que en la posicion elegida se encuentra una celula compleja");
            			}                		
                   }
            }
        }
    	
    }
	
	/**
     * Creación una célula simple, en la posicion x,y, se le preguntara al usuario el tipo de celula a crear
     * @param x Coordenada x de la célula
     * @param y Coordenada y de la célula
	 * @throws PosicionOcupada 
	 * @throws IndicesFueraDeRango 
	 * @throws CelulaIncorrecta 
     */
	@Override
	public void crearCelula(int x, int y) throws PosicionOcupada, IndicesFueraDeRango, CelulaIncorrecta {
		
		if (x < nFilas && y < nColumnas) {
			if (superficie.esVacia(x, y)) { //CREACION de una celula SIMPLE en la posicion x,y en caso de haber introducido una coordena correcta dentro del tablero
			
				System.out.println("¿Qué tipo de celula desea crear?"); // preguntamos al usuario el tipo de celula a crear
				Scanner teclado = new Scanner(System.in);
				String opcion = teclado.nextLine().toUpperCase();
				
				if(opcion.equals("SIMPLE")){	// SI ELIGE SIMPLE....
					superficie.nuevaCelula(x, y, new CelulaSimple());
				} else if(opcion.equals("COMPLEJA")){	// SI ELIGE COMPLEJA
					superficie.nuevaCelula(x, y, new CelulaCompleja());				
				}
				else{
					throw new CelulaIncorrecta("No existe dicho tipo de célula");
				}
			}
			else {	//casuï¿½stica de que hayamos escogido unas coordenadas dentro del tablero erroreas
				throw new PosicionOcupada("Se solicitó crear en posición ocupada Fil:" + x + " Col: "+ y);
	        }
	    }
	    else {	//casuï¿½stica de que hayamos escogido unas coordenadas FUERA del tablero
	    	throw new IndicesFueraDeRango("Rango incorrecto Fila: " + x + " Col: "+ y);			
	    }		
	}
	
	/**
	 * guarda el tipo de juego, en este caso escribe en le fichero: complejo
	 * @param fw
	 * @throws IOexception
	 */
	public void guardaTipoJuego(FileWriter fw) throws IOException{
		fw.write("complejo");
		fw.write(System.getProperty("line.separator"));
		
	}

	
	 public String toString(){
	        return this.superficie.toString();
	    }

	 
	 /**
	  * carga el tipo de juego de fichero, primero las posiciones de la celula
	  * y a continuación, dependiendo de que tipo de celula sea u otra, llama a superficie
	  * @param sc
	  * @throws FormatoNumericoIncorrecto
	  */
	@Override
	public void cargarTipoJuego(Scanner sc) throws FormatoNumericoIncorrecto {
		
		boolean continuar = true;
		do{
			int x = 0;
			try{
				ErrorLecturaFichero.incrementaContLinea();
				x = sc.nextInt();
			}
			catch (NoSuchElementException e){
				continuar = false;
				sc.close();				
			}
			
			if (continuar){
				int y = sc.nextInt();
				String tipoCelula = sc.next();
				if(tipoCelula.equals("simple")){
					CelulaSimple celulaSimple = new CelulaSimple();
					superficie.nuevaCelula(x, y, celulaSimple);
					celulaSimple.cargar(sc);
				}
				else if (tipoCelula.equals("compleja")){
					CelulaCompleja celulaCompleja = new CelulaCompleja();
					superficie.nuevaCelula(x, y, celulaCompleja);
					celulaCompleja.cargar(sc);
				}
			}
		}while(continuar);
		
	}

	
}